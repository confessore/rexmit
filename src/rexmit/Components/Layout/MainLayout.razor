@using Discord
@using Discord.WebSocket
@using Microsoft.AspNetCore.Components.Authorization
@using System.Diagnostics
@using System.Security.Claims
@using rexmit.Services
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DiscordShardedClient DiscordShardedClient
@inject FFmpegService FFmpegService

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
                        <AuthorizeView>
            <Authorized>
                <a href="#">Hello, @context.User.Identity.Name!</a>
                <a href="#">@name</a>
                <a href="#">@channel</a>
                <a href="Authentication/Logout">Log out</a>
                <button @onclick="async () => await OkBabyByeBye()">Ok Baby Bye Bye</button>
            </Authorized>
            <NotAuthorized>
                    <a href="Authentication/Login">Log in</a>
            </NotAuthorized>
        </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {

    private string name = string.Empty;
    private ulong? channel = 0;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var nameIdentifier = authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier);
        if (nameIdentifier is not null)
        {
            var user = DiscordShardedClient.GetGuild(900113002198626337).GetUser(Convert.ToUInt64(nameIdentifier.Value));
            if (user is not null)
            {
                name = user.GlobalName;
                var voiceChannel = (user as IGuildUser)?.VoiceChannel;
                channel = voiceChannel.Id;
            }
        }
    }

    private async Task OkBabyByeBye()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine(authState);
        var nameIdentifier = authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier);
        if (nameIdentifier is not null)
        {
            Console.WriteLine(nameIdentifier);
            var user = DiscordShardedClient.GetGuild(900113002198626337).GetUser(Convert.ToUInt64(nameIdentifier.Value));
            if (user is not null)
            {
                Console.WriteLine(user);
                name = user.GlobalName;
                var voiceChannel = (user as IGuildUser)?.VoiceChannel;
                channel = (user as IGuildUser)?.VoiceChannel.Id;
                var audioClient = await voiceChannel.ConnectAsync();
                await FFmpegService.SendFFmpegAsync(audioClient, "./okbabybyebye.mp3");
            }
        }
    }
}
