@page "/soundboard"
@using Amazon.S3
@using Amazon.S3.Model
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using Discord
@using Discord.WebSocket
@using Microsoft.AspNetCore.Components.Authorization
@using System.Diagnostics
@using System.Security.Claims
@using System.Threading
@using rexmit.Handlers
@using rexmit.Models.Interfaces
@using rexmit.Modules
@using rexmit.Queries
@using rexmit.Services

@attribute [Authorize]
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DiscordShardedClient DiscordShardedClient
@inject FFmpegService FFmpegService
@inject IAmazonS3 AmazonS3
@inject AudioHandlerService AudioHandlerService
@inject IMediator _mediator
@inject ISecurityActor SecurityActor
@inject DiscordService _discordService

@foreach (var objectKey in objectKeys)
{
    <MudButton Disabled="disabled" Color="MudBlazor.Color.Primary" @onclick="async () => await PlayAudioAsync(objectKey)">@objectKey</MudButton>
}

@name
@channel
@id

@code {

    private string name = string.Empty;
    private ulong? channel = 0;
    private IList<string> objectKeys = [];
        private bool disabled;
        private ulong id = 5;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await _mediator.Send(new GetUserByIdQuery() { Id = SecurityActor.DiscordId });
            if (user is not null)
            {
                id = user.Id;
                StateHasChanged();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
            objectKeys = await AmazonS3.GetAllObjectKeysAsync("rexmit", string.Empty, null);
            var guild = _discordService.GetGuildByUserId(SecurityActor.DiscordId);
            if (guild is not null)
            {
                var user = DiscordShardedClient.GetGuild(guild.Id).GetUser(SecurityActor.DiscordId);
                if (user is not null)
                {
                    name = user.GlobalName;
                    var voiceChannel = (user as IGuildUser)?.VoiceChannel;
                    channel = voiceChannel?.Id;
                }
        }
    }

    private async Task PlayAudioAsync(string objectKey)
    {
        disabled = true;
        var url = AmazonS3.GeneratePreSignedURL("rexmit", objectKey, DateTime.Now.AddHours(1), null);
        await AudioHandlerService.HandleAudio(SecurityActor.DiscordId, url);
        await Task.Delay(1000);
        disabled = false;
    }
}
